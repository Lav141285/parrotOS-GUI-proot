#!/bin/bash

R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
W="$(printf '\033[1;37m')"
C="$(printf '\033[1;36m')"

banner() {
	clear
	printf "\033[33m╭━━━╮╱╱╱╱╱╱╱╱╱╭╮╱╭━━━┳━━━╮\033[0m\n"
	printf "\033[33m┃╭━╮┃╱╱╱╱╱╱╱╱╭╯╰╮┃╭━╮┃╭━╮┃\033[0m\n"
	printf "\033[33m┃╰━╯┣━━┳━┳━┳━┻╮╭╯┃┃╱┃┃╰━━╮\033[0m\n"
	printf "\033[33m┃╭━━┫╭╮┃╭┫╭┫╭╮┃┃╱┃┃╱┃┣━━╮┃\033[0m\n"
	printf "\033[33m┃┃╱╱┃╭╮┃┃┃┃┃╰╯┃╰╮┃╰━╯┃╰━╯┃\033[0m\n"
	printf "\033[33m╰╯╱╱╰╯╰┻╯╰╯╰━━┻━╯╰━━━┻━━━╯\033[0m\n"
	printf "\033[32m code by @sabamdrif \033[0m\n"
	printf "\033[32m subscribe my YouTube Channel Hello Android \0
	33[0m\n"                                                      
}

extra_things() {
	clear
	banner
	echo
	echo "-----Select Browser-----"
	echo
	echo "1. firefox (recommended)"
	echo
	echo "2. chromium."
	echo 
	echo "3. both firefox and chromium"
	echo
	echo "4. skip this part"
	echo
	read -p "Select option(default 1): " select_browser
	echo
	sleep 1.5
	clear
	echo "-----Select Media Player-----"
	echo 
	echo "1. mpv media player(recommended)"
	echo
	echo "2. VLC media player"
	echo
	echo "3. both VLC and mpv"
	echo
	echo "4. skip this part"
	echo
	read -p "Select option(default 1): " select_media
	clear
	if [[ $select_browser == "1" ]]; then
		firefox_install	 
	elif [[ $select_browser == "2" ]]; then
		clear
		sleep 1
		chromium
	elif [[ $select_browser == "3" ]]; then
		firefox_install
		chromium
	elif [[ $select_browser == "4" ]]; then
		echo
		echo "Skiping Browser Installation"
		echo
		sleep 2
		clear
	elif [[ $select_browser == "" ]]; then
		firefox_install
	else 
		firefox-esr_install
	fi
	if [[ $select_media == "1" ]]; then
		mpv_installer
	elif [[ $select_media == "2" ]]; then
		vlc_installer
	elif [[ $select_media == "3" ]]; then
		mpv_installer
		sleep 1
		vlc_installer
	elif [[ $select_media == "4" ]]; then
		echo
		echo "Skiping Media Player Installation"
		echo
		sleep 2
		clear
	else
		mpv_installer
	fi
}

firefox_install() {
	clear
	banner
	sleep 1
	echo "Checking if  Firefox browser installed already.."
	echo
	echo
	if [[ $(command -v firefox) ]]; then
		echo "Firefox is already installed.."
		sleep .5
		clear
	else
		clear
		sleep 1
		echo "Firefox not found.Installing now.."
		echo
		echo
		sudo apt update;sudo apt install firefox-esr -y 
	fi
}

video_player_installer() {
	banner
	echo
	echo "Select video player from bellow"
	echo
	echo "1. mpv (recommended)"
	echo
	echo "2. vlc media player"
	echo
	echo "3. both vlc and mpv"
	echo
	echo "4. skip this part"
	echo
	read -p "select an option(Default 1): " select_vd
	echo
	if [[ ${select_vd} == "1" ]]; then
		mpv_installer
	elif [[ ${select_vd} == "2" ]]; then
		vlc_installer
	elif [[ ${select_vd} == "3" ]]; then
		mpv_installer
		sleep 1
		vlc_installer
	elif [[ ${select_vd} == "4" ]]; then
		echo "moving to the next part"
		sleep 1.7
		clear
	elif [[ ${select_vd} == "" ]]; then
		mpv_installer
	fi
}

mpv_installer() {
	clear
	banner
	echo
	echo "Checking if mpv is available or not"
	if [[ $(command -v mpv) ]]; then
		echo 
		echo "mpv is already Installed"
		sleep 1
	else
		echo "mpv is not installed. Installing mpv.."
		echo
		sleep 1
		sudo apt update && sudo apt install mpv -y
	fi
}

vlc_installer() {
	clear
	banner
	echo
	echo "Checking if vlc is available or not"
	if [[ $(command -v vlc) ]]; then
		echo 
		echo "vlc is already Installed"
		sleep 1
	else
		echo "vlc  is not installed. Installing vlc.."
		echo
		sleep 1
		sudo apt update && sudo apt install vlc -y
	fi
}


browser_installer() {
	banner
	echo 
	echo "Select which browser do you want."
	echo
	echo "1. firefox"
	echo
	echo "2. chromium"
	echo 
	echo "3. firefox & chromium (both)"
	echo
	read -p "select an option(Default 1): " selected_b
	echo
	if [[ ${selected_b} == "1" ]]; then
		clear
		echo "installing Firefox browser.."
		echo 
		sudo apt install firefox-esr -y 
	elif [[ ${selected_b} == "2" ]]; then
		clear
		echo "installing Chromium browser.."
		echo
		chromium
	elif [[ ${selected_b} == "3" ]]; then
		clear
		echo "installing Firefox and Chromium browser.."
		echo
		sudo apt install firefox-esr -y 
		chromium
	elif [[ ${selected_b} == "" ]]; then
		clear
		echo "installing Firefox browser.."
		echo 
		sudo apt install firefox-esr -y
	else 
		echo "installing Firefox browser.."
		echo 
		sudo apt install firefox-esr -y
	fi
}
		
setup_repositories(){
	rm /etc/apt/sources.list
	echo "deb http://mirrors.ustc.edu.cn/parrot parrot main contrib non-free" >> /etc/apt/sources.list
	echo "deb-src http://mirrors.ustc.edu.cn/parrot parrot main contrib non-free" >> /etc/apt/sources.list
	#Import the gpg key, this is only required in Parrot Security OS
	wget http://archive.parrotsec.org/parrot/misc/archive.gpg -O /etc/apt/trusted.gpg.d/parrot-archive-key.asc

	#Setup DNS
	echo "127.0.0.1 localhost" > /etc/hosts
	echo "nameserver 8.8.8.8" > /etc/resolv.conf
	echo "nameserver 8.8.4.4" >> /etc/resolv.conf
}

install_parrot_packages(){
	apt update -y
	apt upgrade -y
	apt install parrot-apps-basics parrot-core
}

package() {
	banner
    echo -e "${R} [${W}-${R}]${C} Checking required packages..."${W}

	setup_repositories
	install_parrot_packages

    apt install xfce4* -y
    apt install sudo -y

    apt --fix-broken install udisks2 -y
    rm /var/lib/dpkg/info/udisks2.postinst
    echo "" > /var/lib/dpkg/info/udisks2.postinst
	
    sudo dpkg --configure -a
    sudo apt-mark hold udisks2
    sudo apt-mark unhold gvfs-daemons
    apt install xfce4* -y
    sudo dpkg --configure -a
    packs=(sudo wget curl nano git keyboard-configuration qterminal leafpad tzdata librsvg2-common menu inetutils-tools dialog dbus-x11 )
    sudo dpkg --configure -a
    for hulu in "${packs[@]}"; do
        type -p "$hulu" &>/dev/null || {
            echo -e "\n${R} [${W}-${R}]${G} Installing package : ${Y}$hulu${C}"${W}
            sudo apt-get install "$hulu" -y --no-install-recommends
        }
    done
    sudo apt update -y
}

fix_broken() {
    banner
    echo -e "${R} [${W}-${R}]${C} Checking error and fix it..."${W}
    sudo dpkg --configure -a
    apt install xfce4* -y
    sudo apt-get install --fix-broken keyboard-configuration -y
}

chromium() {
	banner
    echo -e "${R} [${W}-${R}]${C} Uninstalling OLD chromium..."${W}
    chrome=(chromium* chromium-browser* snapd)
    for hula in "${chrome[@]}"; do
        type -p "$hula" &>/dev/null || {
            echo -e "\n${R} [${W}-${R}]${G} Purging package : ${Y}$hula${C}"${W}
            apt purge "$hula" -y 
            sudo apt purge "$hula" -y 
        }
    done
    sudo apt update -y
    sudo apt install software-properties-common gnupg2 --no-install-recommends -y
    echo -e "${R} [${W}-${R}]${C} Installing Chromium..."${W}
    sudo apt install chromium -y
    sudo sed -i 's/chromium %U/chromium --no-sandbox %U/g' /usr/share/applications/chromium.desktop
    sudo apt-get upgrade -y
}

vnc() {
	banner
   	echo -e "${R} [${W}-${R}]${C} Setting up VNC Server..."${W}
  	if [[ ! -d "$HOME/.vnc" ]]; then
        mkdir -p "$HOME/.vnc"
    fi
   	if [[ -e "/usr/local/bin/vncstart" ]]; then
        rm -rf /usr/local/bin/vncstart
    fi
  	echo "#!/usr/bin/env bash" >>/usr/local/bin/vncstart
  	echo "dbus-launch" >>/usr/local/bin/vncstart
  	echo "vncserver -geometry 1500x720  -xstartup /usr/bin/startxfce4" >>/usr/local/bin/vncstart
    chmod +x /usr/local/bin/vncstart
 	 if [[ -e "/usr/local/bin/vncstop" ]]; then
        rm -rf /usr/local/bin/vncstop
    fi
  	echo "#!/usr/bin/env bash" >>/usr/local/bin/vncstop
  	echo "vncserver -kill :*" >>/usr/local/bin/vncstop
  	echo "rm -rf /username/.vnc/localhost:*.pid" >>/usr/local/bin/vncstop
  	echo "rm -rf /tmp/.X1-lock" >>/usr/local/bin/vncstop
 	echo "rm -rf /tmp/.X11-unix/X1" >>/usr/local/bin/vncstop
    chmod +x /usr/local/bin/vncstop
 	if [[ -e "/usr/local/bin/fixvnc" ]]; then
        rm -rf /usr/local/bin/fixvnc
    fi
 	echo "pkill Xtigervnc" >>/usr/local/bin/fixvnc
 	echo "LD_PRELOAD=/lib/aarch64-linux-gnu/libgcc_s.so.1 vncserver :1 -localhost no" >>/usr/local/bin/fixvnc
    chmod +x /usr/local/bin/fixvnc

    echo "export DISPLAY=":1"" >> /etc/profile
    echo "export PULSE_SERVER=127.0.0.1" >> /etc/profile
    source /etc/profile
}

note() {
banner
    echo -e " ${G} Successfully Installed !"${W}
    sleep 1
    echo
    echo -e " ${G}Type ${C}vncstart${G} to run Vncserver."${W}
    echo -e " ${G}Type ${C}vncstop${G} to stop Vncserver."${W}
    echo
    echo -e " ${C}Install VNC VIEWER Apk on your Device."${W}
    echo
    echo -e " ${C}Open VNC VIEWER & Click on + Button."${W}
    echo
    echo -e " ${C}Enter the Address localhost:1 & Name anything you like."${W}
    echo
    echo -e " ${C}Set the Picture Quality to High for better Quality."${W}
    echo
    echo -e " ${C}Click on Connect & Input the Password."${W}
    echo
    echo -e " ${C}Enjoy :D"${W}
    echo
    echo

}

add_sound() {
	echo "$(echo "bash ~/.sound" | cat - /data/data/com.termux/files/usr/bin/parrot)" > /data/data/com.termux/files/usr/bin/parrot
}

customize() {
    sudo apt install qt5-style-kvantum qt5-style-kvantum-themes -y
    sudo apt install qt5ct -y
    echo "export QT_QPA_PLATFORMTHEME=qt5ct" >> ~/.profile
	sudo apt install zsh zsh-autosuggestions zsh-syntax-highlighting -y
    cp /etc/skel/.zshrc ~/
    sudo chsh -s $(which zsh) $(whoami)
}

clenup() {
	clear
    banner
	echo
	echo "Cleaning up system.."
	echo
    sleep 2
    cd ~
	sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
	sleep 2
	sudo apt autoremove xfce4-terminal -y
        sleep 2
    sudo apt clean && sudo apt autoclean  

	
}


login() {
    apt autoremove sudo -y
    banner
    read -p $' \e[1;31m[\e[0m\e[1;77m~\e[0m\e[1;31m]\e[0m\e[1;92m Input Username [Lowercase] : \e[0m\e[1;96m\en' user
    echo -e "${W}"
    read -p $' \e[1;31m[\e[0m\e[1;77m~\e[0m\e[1;31m]\e[0m\e[1;92m Input Password : \e[0m\e[1;96m\en' pass
    echo -e "${W}"
    useradd -m -s $(which bash) ${user}
    chmod u+w /etc/sudoers
    echo "${user}:${pass}" | chpasswd
    apt update -y
    apt install sudo -y
     echo "$user ALL=(ALL:ALL) ALL" >> /etc/sudoers
    cat <<EOF > "/data/data/com.termux/files/usr/bin/parrot"
if [ "\$1" == "-r" ]; then
    proot-distro login parrot
else
    proot-distro login --user "$user" parrot
fi 
EOF
    clear

}

#full_update
login
package
fix_broken
extra_things
#browser_installer
#video_player_installer
#chromium
add_sound
customize
clenup
#vnc
#note

